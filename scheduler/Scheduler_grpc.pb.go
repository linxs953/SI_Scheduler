// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: Scheduler.proto

package scheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Scheduler_CreateTaskDefine_FullMethodName = "/scheduler.Scheduler/CreateTaskDefine"
	Scheduler_UpdateTaskDefine_FullMethodName = "/scheduler.Scheduler/UpdateTaskDefine"
	Scheduler_DeleteTaskDefine_FullMethodName = "/scheduler.Scheduler/DeleteTaskDefine"
	Scheduler_GetTaskDefine_FullMethodName    = "/scheduler.Scheduler/GetTaskDefine"
	Scheduler_ListTaskDefines_FullMethodName  = "/scheduler.Scheduler/ListTaskDefines"
	Scheduler_CreateImageBuild_FullMethodName = "/scheduler.Scheduler/CreateImageBuild"
	Scheduler_UpdateImageBuild_FullMethodName = "/scheduler.Scheduler/UpdateImageBuild"
	Scheduler_DeleteImageBuild_FullMethodName = "/scheduler.Scheduler/DeleteImageBuild"
	Scheduler_GetImageBuild_FullMethodName    = "/scheduler.Scheduler/GetImageBuild"
	Scheduler_ListImageBuilds_FullMethodName  = "/scheduler.Scheduler/ListImageBuilds"
)

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===== Service Definition =====
type SchedulerClient interface {
	// TaskDefine 相关操作
	CreateTaskDefine(ctx context.Context, in *CreateTaskDefineRequest, opts ...grpc.CallOption) (*CreateTaskDefineResponse, error)
	UpdateTaskDefine(ctx context.Context, in *UpdateTaskDefineRequest, opts ...grpc.CallOption) (*UpdateTaskDefineResponse, error)
	DeleteTaskDefine(ctx context.Context, in *DeleteTaskDefineRequest, opts ...grpc.CallOption) (*DeleteTaskDefineResponse, error)
	GetTaskDefine(ctx context.Context, in *GetTaskDefineRequest, opts ...grpc.CallOption) (*GetTaskDefineResponse, error)
	ListTaskDefines(ctx context.Context, in *ListTaskDefinesRequest, opts ...grpc.CallOption) (*ListTaskDefinesResponse, error)
	// ImageBuild 相关操作
	CreateImageBuild(ctx context.Context, in *CreateImageBuildRequest, opts ...grpc.CallOption) (*CreateImageBuildResponse, error)
	UpdateImageBuild(ctx context.Context, in *UpdateBuildRequest, opts ...grpc.CallOption) (*UpdateBuildResponse, error)
	DeleteImageBuild(ctx context.Context, in *DeleteBuildRequest, opts ...grpc.CallOption) (*DeleteBuildResponse, error)
	GetImageBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*GetBuildResponse, error)
	ListImageBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) CreateTaskDefine(ctx context.Context, in *CreateTaskDefineRequest, opts ...grpc.CallOption) (*CreateTaskDefineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskDefineResponse)
	err := c.cc.Invoke(ctx, Scheduler_CreateTaskDefine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateTaskDefine(ctx context.Context, in *UpdateTaskDefineRequest, opts ...grpc.CallOption) (*UpdateTaskDefineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskDefineResponse)
	err := c.cc.Invoke(ctx, Scheduler_UpdateTaskDefine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteTaskDefine(ctx context.Context, in *DeleteTaskDefineRequest, opts ...grpc.CallOption) (*DeleteTaskDefineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskDefineResponse)
	err := c.cc.Invoke(ctx, Scheduler_DeleteTaskDefine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetTaskDefine(ctx context.Context, in *GetTaskDefineRequest, opts ...grpc.CallOption) (*GetTaskDefineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskDefineResponse)
	err := c.cc.Invoke(ctx, Scheduler_GetTaskDefine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListTaskDefines(ctx context.Context, in *ListTaskDefinesRequest, opts ...grpc.CallOption) (*ListTaskDefinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTaskDefinesResponse)
	err := c.cc.Invoke(ctx, Scheduler_ListTaskDefines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) CreateImageBuild(ctx context.Context, in *CreateImageBuildRequest, opts ...grpc.CallOption) (*CreateImageBuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateImageBuildResponse)
	err := c.cc.Invoke(ctx, Scheduler_CreateImageBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateImageBuild(ctx context.Context, in *UpdateBuildRequest, opts ...grpc.CallOption) (*UpdateBuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBuildResponse)
	err := c.cc.Invoke(ctx, Scheduler_UpdateImageBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteImageBuild(ctx context.Context, in *DeleteBuildRequest, opts ...grpc.CallOption) (*DeleteBuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBuildResponse)
	err := c.cc.Invoke(ctx, Scheduler_DeleteImageBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetImageBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*GetBuildResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBuildResponse)
	err := c.cc.Invoke(ctx, Scheduler_GetImageBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListImageBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBuildsResponse)
	err := c.cc.Invoke(ctx, Scheduler_ListImageBuilds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility.
//
// ===== Service Definition =====
type SchedulerServer interface {
	// TaskDefine 相关操作
	CreateTaskDefine(context.Context, *CreateTaskDefineRequest) (*CreateTaskDefineResponse, error)
	UpdateTaskDefine(context.Context, *UpdateTaskDefineRequest) (*UpdateTaskDefineResponse, error)
	DeleteTaskDefine(context.Context, *DeleteTaskDefineRequest) (*DeleteTaskDefineResponse, error)
	GetTaskDefine(context.Context, *GetTaskDefineRequest) (*GetTaskDefineResponse, error)
	ListTaskDefines(context.Context, *ListTaskDefinesRequest) (*ListTaskDefinesResponse, error)
	// ImageBuild 相关操作
	CreateImageBuild(context.Context, *CreateImageBuildRequest) (*CreateImageBuildResponse, error)
	UpdateImageBuild(context.Context, *UpdateBuildRequest) (*UpdateBuildResponse, error)
	DeleteImageBuild(context.Context, *DeleteBuildRequest) (*DeleteBuildResponse, error)
	GetImageBuild(context.Context, *GetBuildRequest) (*GetBuildResponse, error)
	ListImageBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error)
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchedulerServer struct{}

func (UnimplementedSchedulerServer) CreateTaskDefine(context.Context, *CreateTaskDefineRequest) (*CreateTaskDefineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskDefine not implemented")
}
func (UnimplementedSchedulerServer) UpdateTaskDefine(context.Context, *UpdateTaskDefineRequest) (*UpdateTaskDefineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskDefine not implemented")
}
func (UnimplementedSchedulerServer) DeleteTaskDefine(context.Context, *DeleteTaskDefineRequest) (*DeleteTaskDefineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskDefine not implemented")
}
func (UnimplementedSchedulerServer) GetTaskDefine(context.Context, *GetTaskDefineRequest) (*GetTaskDefineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskDefine not implemented")
}
func (UnimplementedSchedulerServer) ListTaskDefines(context.Context, *ListTaskDefinesRequest) (*ListTaskDefinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskDefines not implemented")
}
func (UnimplementedSchedulerServer) CreateImageBuild(context.Context, *CreateImageBuildRequest) (*CreateImageBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageBuild not implemented")
}
func (UnimplementedSchedulerServer) UpdateImageBuild(context.Context, *UpdateBuildRequest) (*UpdateBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageBuild not implemented")
}
func (UnimplementedSchedulerServer) DeleteImageBuild(context.Context, *DeleteBuildRequest) (*DeleteBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImageBuild not implemented")
}
func (UnimplementedSchedulerServer) GetImageBuild(context.Context, *GetBuildRequest) (*GetBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageBuild not implemented")
}
func (UnimplementedSchedulerServer) ListImageBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImageBuilds not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}
func (UnimplementedSchedulerServer) testEmbeddedByValue()                   {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	// If the following call pancis, it indicates UnimplementedSchedulerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_CreateTaskDefine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskDefineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CreateTaskDefine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_CreateTaskDefine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CreateTaskDefine(ctx, req.(*CreateTaskDefineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateTaskDefine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskDefineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateTaskDefine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_UpdateTaskDefine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateTaskDefine(ctx, req.(*UpdateTaskDefineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteTaskDefine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskDefineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteTaskDefine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_DeleteTaskDefine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteTaskDefine(ctx, req.(*DeleteTaskDefineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetTaskDefine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskDefineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetTaskDefine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_GetTaskDefine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetTaskDefine(ctx, req.(*GetTaskDefineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListTaskDefines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskDefinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListTaskDefines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_ListTaskDefines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListTaskDefines(ctx, req.(*ListTaskDefinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_CreateImageBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CreateImageBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_CreateImageBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CreateImageBuild(ctx, req.(*CreateImageBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateImageBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateImageBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_UpdateImageBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateImageBuild(ctx, req.(*UpdateBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteImageBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteImageBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_DeleteImageBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteImageBuild(ctx, req.(*DeleteBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetImageBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetImageBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_GetImageBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetImageBuild(ctx, req.(*GetBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListImageBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListImageBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_ListImageBuilds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListImageBuilds(ctx, req.(*ListBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaskDefine",
			Handler:    _Scheduler_CreateTaskDefine_Handler,
		},
		{
			MethodName: "UpdateTaskDefine",
			Handler:    _Scheduler_UpdateTaskDefine_Handler,
		},
		{
			MethodName: "DeleteTaskDefine",
			Handler:    _Scheduler_DeleteTaskDefine_Handler,
		},
		{
			MethodName: "GetTaskDefine",
			Handler:    _Scheduler_GetTaskDefine_Handler,
		},
		{
			MethodName: "ListTaskDefines",
			Handler:    _Scheduler_ListTaskDefines_Handler,
		},
		{
			MethodName: "CreateImageBuild",
			Handler:    _Scheduler_CreateImageBuild_Handler,
		},
		{
			MethodName: "UpdateImageBuild",
			Handler:    _Scheduler_UpdateImageBuild_Handler,
		},
		{
			MethodName: "DeleteImageBuild",
			Handler:    _Scheduler_DeleteImageBuild_Handler,
		},
		{
			MethodName: "GetImageBuild",
			Handler:    _Scheduler_GetImageBuild_Handler,
		},
		{
			MethodName: "ListImageBuilds",
			Handler:    _Scheduler_ListImageBuilds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Scheduler.proto",
}
