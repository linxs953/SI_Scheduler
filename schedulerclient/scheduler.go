// Code generated by goctl. DO NOT EDIT.
// Source: Scheduler.proto

package schedulerclient

import (
	"context"

	"Scheduler/scheduler"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BuildConfig                 = scheduler.BuildConfig
	CleanupConfig               = scheduler.CleanupConfig
	CreateImageBuildRequest     = scheduler.CreateImageBuildRequest
	CreateImageBuildResponse    = scheduler.CreateImageBuildResponse
	CreateTaskDefineRequest     = scheduler.CreateTaskDefineRequest
	CreateTaskDefineResponse    = scheduler.CreateTaskDefineResponse
	DeleteBuildRequest          = scheduler.DeleteBuildRequest
	DeleteBuildResponse         = scheduler.DeleteBuildResponse
	DeleteTaskDefineRequest     = scheduler.DeleteTaskDefineRequest
	DeleteTaskDefineResponse    = scheduler.DeleteTaskDefineResponse
	GetBuildRequest             = scheduler.GetBuildRequest
	GetBuildResponse            = scheduler.GetBuildResponse
	GetTaskDefineRequest        = scheduler.GetTaskDefineRequest
	GetTaskDefineResponse       = scheduler.GetTaskDefineResponse
	GitConfig                   = scheduler.GitConfig
	ImageConfig                 = scheduler.ImageConfig
	ListBuildsRequest           = scheduler.ListBuildsRequest
	ListBuildsResponse          = scheduler.ListBuildsResponse
	ListTaskDefinesRequest      = scheduler.ListTaskDefinesRequest
	ListTaskDefinesResponse     = scheduler.ListTaskDefinesResponse
	TaskDefine                  = scheduler.TaskDefine
	TaskDefineSpec              = scheduler.TaskDefineSpec
	TaskDefineSpec_RelatedImage = scheduler.TaskDefineSpec_RelatedImage
	TaskDefineStatus            = scheduler.TaskDefineStatus
	UpdateBuildRequest          = scheduler.UpdateBuildRequest
	UpdateBuildResponse         = scheduler.UpdateBuildResponse
	UpdateTaskDefineRequest     = scheduler.UpdateTaskDefineRequest
	UpdateTaskDefineResponse    = scheduler.UpdateTaskDefineResponse

	Scheduler interface {
		// TaskDefine 相关操作
		CreateTaskDefine(ctx context.Context, in *CreateTaskDefineRequest, opts ...grpc.CallOption) (*CreateTaskDefineResponse, error)
		UpdateTaskDefine(ctx context.Context, in *UpdateTaskDefineRequest, opts ...grpc.CallOption) (*UpdateTaskDefineResponse, error)
		DeleteTaskDefine(ctx context.Context, in *DeleteTaskDefineRequest, opts ...grpc.CallOption) (*DeleteTaskDefineResponse, error)
		GetTaskDefine(ctx context.Context, in *GetTaskDefineRequest, opts ...grpc.CallOption) (*GetTaskDefineResponse, error)
		ListTaskDefines(ctx context.Context, in *ListTaskDefinesRequest, opts ...grpc.CallOption) (*ListTaskDefinesResponse, error)
		// ImageBuild 相关操作
		CreateImageBuild(ctx context.Context, in *CreateImageBuildRequest, opts ...grpc.CallOption) (*CreateImageBuildResponse, error)
		UpdateImageBuild(ctx context.Context, in *UpdateBuildRequest, opts ...grpc.CallOption) (*UpdateBuildResponse, error)
		DeleteImageBuild(ctx context.Context, in *DeleteBuildRequest, opts ...grpc.CallOption) (*DeleteBuildResponse, error)
		GetImageBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*GetBuildResponse, error)
		ListImageBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	}

	defaultScheduler struct {
		cli zrpc.Client
	}
)

func NewScheduler(cli zrpc.Client) Scheduler {
	return &defaultScheduler{
		cli: cli,
	}
}

// TaskDefine 相关操作
func (m *defaultScheduler) CreateTaskDefine(ctx context.Context, in *CreateTaskDefineRequest, opts ...grpc.CallOption) (*CreateTaskDefineResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.CreateTaskDefine(ctx, in, opts...)
}

func (m *defaultScheduler) UpdateTaskDefine(ctx context.Context, in *UpdateTaskDefineRequest, opts ...grpc.CallOption) (*UpdateTaskDefineResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.UpdateTaskDefine(ctx, in, opts...)
}

func (m *defaultScheduler) DeleteTaskDefine(ctx context.Context, in *DeleteTaskDefineRequest, opts ...grpc.CallOption) (*DeleteTaskDefineResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.DeleteTaskDefine(ctx, in, opts...)
}

func (m *defaultScheduler) GetTaskDefine(ctx context.Context, in *GetTaskDefineRequest, opts ...grpc.CallOption) (*GetTaskDefineResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.GetTaskDefine(ctx, in, opts...)
}

func (m *defaultScheduler) ListTaskDefines(ctx context.Context, in *ListTaskDefinesRequest, opts ...grpc.CallOption) (*ListTaskDefinesResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.ListTaskDefines(ctx, in, opts...)
}

// ImageBuild 相关操作
func (m *defaultScheduler) CreateImageBuild(ctx context.Context, in *CreateImageBuildRequest, opts ...grpc.CallOption) (*CreateImageBuildResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.CreateImageBuild(ctx, in, opts...)
}

func (m *defaultScheduler) UpdateImageBuild(ctx context.Context, in *UpdateBuildRequest, opts ...grpc.CallOption) (*UpdateBuildResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.UpdateImageBuild(ctx, in, opts...)
}

func (m *defaultScheduler) DeleteImageBuild(ctx context.Context, in *DeleteBuildRequest, opts ...grpc.CallOption) (*DeleteBuildResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.DeleteImageBuild(ctx, in, opts...)
}

func (m *defaultScheduler) GetImageBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*GetBuildResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.GetImageBuild(ctx, in, opts...)
}

func (m *defaultScheduler) ListImageBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.ListImageBuilds(ctx, in, opts...)
}
